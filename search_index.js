var search_data = {
    'index': {
        'searchIndex': ["florianwolters","florianwolters\\component","florianwolters\\component\\core","florianwolters\\component\\core\\charutils","florianwolters\\component\\core\\randomstringutils","florianwolters\\component\\core\\stringescapeutils","florianwolters\\component\\core\\stringutils","florianwolters\\component\\core\\wordutils","florianwolters\\component\\core\\charutils::charasciiarray","florianwolters\\component\\core\\charutils::charasciialphaarray","florianwolters\\component\\core\\charutils::charasciialphalowerarray","florianwolters\\component\\core\\charutils::charasciialphaupperarray","florianwolters\\component\\core\\charutils::charasciialphanumericarray","florianwolters\\component\\core\\charutils::charasciicontrolarray","florianwolters\\component\\core\\charutils::charasciiprintablearray","florianwolters\\component\\core\\charutils::charasciinumericarray","florianwolters\\component\\core\\charutils::isascii","florianwolters\\component\\core\\charutils::isasciialpha","florianwolters\\component\\core\\charutils::isasciialphalower","florianwolters\\component\\core\\charutils::isasciialphaupper","florianwolters\\component\\core\\charutils::isasciialphanumeric","florianwolters\\component\\core\\charutils::isasciicontrol","florianwolters\\component\\core\\charutils::isasciinumeric","florianwolters\\component\\core\\charutils::isasciiprintable","florianwolters\\component\\core\\charutils::fromasciivaluetochar","florianwolters\\component\\core\\charutils::fromasciichartovalue","florianwolters\\component\\core\\randomstringutils::randomalphabetic","florianwolters\\component\\core\\randomstringutils::randomalphabeticlower","florianwolters\\component\\core\\randomstringutils::randomalphabeticupper","florianwolters\\component\\core\\randomstringutils::randomalphanumeric","florianwolters\\component\\core\\randomstringutils::randomascii","florianwolters\\component\\core\\randomstringutils::randomnumeric","florianwolters\\component\\core\\randomstringutils::random","florianwolters\\component\\core\\stringescapeutils::escapehtml","florianwolters\\component\\core\\stringescapeutils::unescapehtml","florianwolters\\component\\core\\stringescapeutils::escaperegex","florianwolters\\component\\core\\stringescapeutils::escapesql","florianwolters\\component\\core\\stringutils::charat","florianwolters\\component\\core\\stringutils::chomp","florianwolters\\component\\core\\stringutils::chop","florianwolters\\component\\core\\stringutils::isblank","florianwolters\\component\\core\\stringutils::isnotblank","florianwolters\\component\\core\\stringutils::isempty","florianwolters\\component\\core\\stringutils::isnotempty","florianwolters\\component\\core\\stringutils::length","florianwolters\\component\\core\\stringutils::lowercase","florianwolters\\component\\core\\stringutils::uppercase","florianwolters\\component\\core\\stringutils::replace","florianwolters\\component\\core\\stringutils::trim","florianwolters\\component\\core\\stringutils::trimtoempty","florianwolters\\component\\core\\stringutils::trimtonull","florianwolters\\component\\core\\stringutils::strip","florianwolters\\component\\core\\stringutils::striptoempty","florianwolters\\component\\core\\stringutils::striptonull","florianwolters\\component\\core\\stringutils::stripstart","florianwolters\\component\\core\\stringutils::stripend","florianwolters\\component\\core\\stringutils::compare","florianwolters\\component\\core\\stringutils::compareignorecase","florianwolters\\component\\core\\stringutils::equal","florianwolters\\component\\core\\stringutils::equalsignorecase","florianwolters\\component\\core\\stringutils::indexof","florianwolters\\component\\core\\stringutils::lastindexof","florianwolters\\component\\core\\stringutils::split","florianwolters\\component\\core\\stringutils::substring","florianwolters\\component\\core\\stringutils::substringafter","florianwolters\\component\\core\\stringutils::substringafterlast","florianwolters\\component\\core\\stringutils::substringbefore","florianwolters\\component\\core\\stringutils::substringbeforelast","florianwolters\\component\\core\\stringutils::substringbetween","florianwolters\\component\\core\\stringutils::capitalize","florianwolters\\component\\core\\stringutils::uncapitalize","florianwolters\\component\\core\\stringutils::repeat","florianwolters\\component\\core\\stringutils::endswith","florianwolters\\component\\core\\stringutils::startswith","florianwolters\\component\\core\\stringutils::removeend","florianwolters\\component\\core\\stringutils::removestart","florianwolters\\component\\core\\wordutils::abbreviate","florianwolters\\component\\core\\wordutils::capitalize","florianwolters\\component\\core\\wordutils::capitalizefully","florianwolters\\component\\core\\wordutils::uncapitalize","florianwolters\\component\\core\\wordutils::initials","florianwolters\\component\\core\\wordutils::swapcase","florianwolters\\component\\core\\wordutils::wrap"],
        'info': [["FlorianWolters","","FlorianWolters.html","","",3],["FlorianWolters\\Component","","FlorianWolters\/Component.html","","",3],["FlorianWolters\\Component\\Core","","FlorianWolters\/Component\/Core.html","","",3],["CharUtils","FlorianWolters\\Component\\Core","FlorianWolters\/Component\/Core\/CharUtils.html","","The class {@see CharUtils} offers operations on characters.",1],["RandomStringUtils","FlorianWolters\\Component\\Core","FlorianWolters\/Component\/Core\/RandomStringUtils.html","","The class {@see RandomStringUtils} offers operations",1],["StringEscapeUtils","FlorianWolters\\Component\\Core","FlorianWolters\/Component\/Core\/StringEscapeUtils.html","","The class {@see StringEscapeUtils} class escapes and",1],["StringUtils","FlorianWolters\\Component\\Core","FlorianWolters\/Component\/Core\/StringUtils.html","","The class {@see StringUtils} offers operations `string`s.",1],["WordUtils","FlorianWolters\\Component\\Core","FlorianWolters\/Component\/Core\/WordUtils.html","","The class {@see WordUtils} offers operations on `string`s",1],["CharUtils::charAsciiArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiArray","()","Returns all ASCII 7 bit characters in an array.",2],["CharUtils::charAsciiAlphaArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiAlphaArray","()","Returns all ASCII 7 bit alphabetic characters in an",2],["CharUtils::charAsciiAlphaLowerArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiAlphaLowerArray","()","Returns all ASCII 7 bit alphabetic lowercase characters",2],["CharUtils::charAsciiAlphaUpperArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiAlphaUpperArray","()","Returns all ASCII 7 bit alphabetic uppercase characters",2],["CharUtils::charAsciiAlphanumericArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiAlphanumericArray","()","Returns all ASCII 7 bit alphanumeric characters in",2],["CharUtils::charAsciiControlArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiControlArray","()","Returns all ASCII 7 bit control characters in an array.",2],["CharUtils::charAsciiPrintableArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiPrintableArray","()","Returns all ASCII 7 bit printable characters in an",2],["CharUtils::charAsciiNumericArray","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_charAsciiNumericArray","()","Returns all ASCII 7 bit numeric characters in an array.",2],["CharUtils::isAscii","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAscii","(string $char)","Checks whether the specified character is ASCII 7 bit.",2],["CharUtils::isAsciiAlpha","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiAlpha","(string $char)","Checks whether the character is ASCII 7 bit alphabetic.",2],["CharUtils::isAsciiAlphaLower","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiAlphaLower","(string $char)","Checks whether the character is ASCII 7 bit alphabetic",2],["CharUtils::isAsciiAlphaUpper","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiAlphaUpper","(string $char)","Checks whether the character is ASCII 7 bit alphabetic",2],["CharUtils::isAsciiAlphanumeric","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiAlphanumeric","(string $char)","Checks whether the character is ASCII 7 bit numeric.",2],["CharUtils::isAsciiControl","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiControl","(string $char)","Checks whether the character is ASCII 7 bit control.",2],["CharUtils::isAsciiNumeric","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiNumeric","(string $char)","Checks whether the character is ASCII 7 bit numeric.",2],["CharUtils::isAsciiPrintable","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_isAsciiPrintable","(string $char)","Checks whether the character is ASCII 7 bit printable.",2],["CharUtils::fromAsciiValueToChar","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_fromAsciiValueToChar","($int)","Returns the ASCII character of the specified ASCII",2],["CharUtils::fromAsciiCharToValue","FlorianWolters\\Component\\Core\\CharUtils","FlorianWolters\/Component\/Core\/CharUtils.html#method_fromAsciiCharToValue","(string $char)","Returns the ASCII value of the specified ASCII character.",2],["RandomStringUtils::randomAlphabetic","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomAlphabetic","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::randomAlphabeticLower","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomAlphabeticLower","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::randomAlphabeticUpper","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomAlphabeticUpper","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::randomAlphanumeric","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomAlphanumeric","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::randomAscii","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomAscii","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::randomNumeric","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_randomNumeric","(integer $count)","Creates a random string whose length is the number",2],["RandomStringUtils::random","FlorianWolters\\Component\\Core\\RandomStringUtils","FlorianWolters\/Component\/Core\/RandomStringUtils.html#method_random","(integer $count, integer $start, integer $end, boolean $letters = true, boolean $numbers = true, array $chars = array())","Creates a random string based on a variety of options.",2],["StringEscapeUtils::escapeHtml","FlorianWolters\\Component\\Core\\StringEscapeUtils","FlorianWolters\/Component\/Core\/StringEscapeUtils.html#method_escapeHtml","(string $str)","Escapes the characters in a `string` using HTML entities.",2],["StringEscapeUtils::unescapeHtml","FlorianWolters\\Component\\Core\\StringEscapeUtils","FlorianWolters\/Component\/Core\/StringEscapeUtils.html#method_unescapeHtml","(string $str)","Unescapes a `string` containing entity escapes to a",2],["StringEscapeUtils::escapeRegEx","FlorianWolters\\Component\\Core\\StringEscapeUtils","FlorianWolters\/Component\/Core\/StringEscapeUtils.html#method_escapeRegEx","(string $str, string $delimiter = &#039;\/&#039;)","Escapes the characters in a `string` to be suitable",2],["StringEscapeUtils::escapeSql","FlorianWolters\\Component\\Core\\StringEscapeUtils","FlorianWolters\/Component\/Core\/StringEscapeUtils.html#method_escapeSql","(string $str)","Escapes the characters in a `string` to be suitable",2],["StringUtils::charAt","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_charAt","(string $str, integer $index)","Returns the character at the specified index.",2],["StringUtils::chomp","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_chomp","(string $str)","Removes one newline from end of a string if it's there,",2],["StringUtils::chop","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_chop","(string $str)","Remove the specified last character from a `string`.",2],["StringUtils::isBlank","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_isBlank","(string $str)","Checks if a `string` is whitespace, empty (`''`) or",2],["StringUtils::isNotBlank","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_isNotBlank","(string $str)","Checks if a `string` is not empty (`''`), not `null`",2],["StringUtils::isEmpty","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_isEmpty","(string $str)","Checks if a `string` is empty (`''`) or `null`.",2],["StringUtils::isNotEmpty","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_isNotEmpty","(string $str)","Checks if a `string` is not empty (`''`) and not `null`.",2],["StringUtils::length","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_length","(string $str)","Returns the length of a `string` or `0` if the `string`",2],["StringUtils::lowerCase","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_lowerCase","(string $str)","Converts a `string` to lower case.",2],["StringUtils::upperCase","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_upperCase","(string $str)","Converts a `string` to upper case.",2],["StringUtils::replace","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_replace","(string $text, string $search, string $replace, integer $max = -1)","Replaces a `string` with another `string` inside a",2],["StringUtils::trim","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_trim","(string $str)","Removes control characters (char &lt;= 32) from both",2],["StringUtils::trimToEmpty","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_trimToEmpty","(string $str)","Removes control characters (char &lt;= 32) from both",2],["StringUtils::trimToNull","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_trimToNull","(string $str)","Removes control characters (char &lt;= 32) from both",2],["StringUtils::strip","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_strip","(string $str, string $chars)","Strips any of a set of characters from the start and",2],["StringUtils::stripToEmpty","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_stripToEmpty","(string $str)","Strips whitespace from the start and end of a `string`",2],["StringUtils::stripToNull","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_stripToNull","(string $str)","Strips whitespace from the start and end of a `string`",2],["StringUtils::stripStart","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_stripStart","(string $str, string $chars)","Strips any of a set of characters from the start of",2],["StringUtils::stripEnd","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_stripEnd","(string $str, string $chars)","Strips any of a set of characters from the end of a",2],["StringUtils::compare","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_compare","(string $str1, string $str2)","Compares two `string`s lexicographically.",2],["StringUtils::compareIgnoreCase","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_compareIgnoreCase","(string $str1, string $str2)","Compares two `string`s lexicographically, ignoring",2],["StringUtils::equal","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_equal","(string $str1, string $str2)","Compares two `string`s, returning `true` if they are",2],["StringUtils::equalsIgnoreCase","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_equalsIgnoreCase","(string $str1, string $str2)","Compares two `string`s, returning `true` if they are",2],["StringUtils::indexOf","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_indexOf","(string $str, string $search, integer $startPos)","Finds the first index within a `string` from a start",2],["StringUtils::lastIndexOf","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_lastIndexOf","(string $str, string $search, integer $startPos)","Finds the first index within a `string`, handling `null`.",2],["StringUtils::split","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_split","(string $str, string $chars = null, integer $max)","Splits the provided text into an `array` with a maximum",2],["StringUtils::substring","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substring","(string $str, integer $start, integer $end = null)","Gets a substring from the specified `string` avoiding",2],["StringUtils::substringAfter","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substringAfter","(string $str, string $separator)","Gets the substring after the first occurrence of a",2],["StringUtils::substringAfterLast","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substringAfterLast","(string $str, string $separator)","Gets the substring after the last occurrence of a separator.",2],["StringUtils::substringBefore","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substringBefore","(string $str, string $separator)","Gets the substring before the first occurrence of a",2],["StringUtils::substringBeforeLast","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substringBeforeLast","(string $str, string $separator)","Gets the substring before the last occurrence of a",2],["StringUtils::substringBetween","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_substringBetween","(string $str, string $open, string $close = null)","Gets the `string` that is nested in between two `string`s.",2],["StringUtils::capitalize","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_capitalize","(string $str)","Capitalizes a `string` changing the first letter to",2],["StringUtils::uncapitalize","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_uncapitalize","(string $str)","Uncapitalizes a `string` changing the first letter",2],["StringUtils::repeat","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_repeat","(string $str, integer $repeat, string $separator = null)","Repeats a `string` the specified number of times to",2],["StringUtils::endsWith","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_endsWith","(string $str, string $suffix)","Checks if a `string` ends with a specified suffix.",2],["StringUtils::startsWith","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_startsWith","(string $str, string $prefix)","Checks if a `string` starts with a specified prefix.",2],["StringUtils::removeEnd","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_removeEnd","(string $str, string $remove)","Removes a substring only if it is at the end of a source",2],["StringUtils::removeStart","FlorianWolters\\Component\\Core\\StringUtils","FlorianWolters\/Component\/Core\/StringUtils.html#method_removeStart","(string $str, string $remove)","Removes a substring only if it is at the beginning",2],["WordUtils::abbreviate","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_abbreviate","(string $str, integer $lower, integer $upper = -1, string $append = StringUtils::EMPTY_STR)","Abbreviates a string nicely.",2],["WordUtils::capitalize","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_capitalize","(string $str)","Capitalizes all the whitespace separated words in a",2],["WordUtils::capitalizeFully","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_capitalizeFully","(string $str)","Converts all the whitespace separated words in a `string`",2],["WordUtils::uncapitalize","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_uncapitalize","(string $str)","Uncapitalizes all the whitespace separated words in",2],["WordUtils::initials","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_initials","(string $str, array $delimiters = null)","Extracts the initial letters from each word in the",2],["WordUtils::swapCase","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_swapCase","(string $str)","Swaps the case of a `string` using a word based algorithm.",2],["WordUtils::wrap","FlorianWolters\\Component\\Core\\WordUtils","FlorianWolters\/Component\/Core\/WordUtils.html#method_wrap","(string $str, integer $wrapLength, string $newLine = null, boolean $wrapLongWords = false)","Wraps a single line of text, identifying words by `'",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']